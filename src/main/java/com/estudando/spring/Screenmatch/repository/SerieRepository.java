package com.estudando.spring.Screenmatch.repository;

import com.estudando.spring.Screenmatch.entities.Episodio;
import com.estudando.spring.Screenmatch.entities.Serie;
import com.estudando.spring.Screenmatch.enums.Categoria;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.util.List;
import java.util.Optional;

@Repository
public interface SerieRepository extends JpaRepository<Serie, Long> {

    //Usando queries methods para fazer buscar no banco de dado: declarar apenas o m√©todo na interface que a JPA realiza sua fun√ß√£o
    //M√©todo para encontrar uma Serie pelo seu nome
    Optional<Serie> findByTituloContainingIgnoreCase(String nomeSerie);

    List<Serie> findByAtoresContainingIgnoreCase(String nomeAtor);

    List<Serie> findByGenero(Categoria categoria);


    // üîπ Busca epis√≥dios que contenham parte do t√≠tulo
    @Query("SELECT e FROM Serie s JOIN s.episodioList e WHERE LOWER(e.titulo) LIKE LOWER(CONCAT('%', :trecho, '%'))")
    List<Episodio> episodioTrecho(@Param("trecho") String trecho);

    // üîπ Top 5 s√©ries por avalia√ß√£o
    List<Serie> findTop5ByOrderByAvaliacaoDesc();

    // üîπ S√©ries filtradas por temporadas e avalia√ß√£o m√≠nima
    @Query("SELECT s FROM Serie s WHERE s.totalTemporadas <= :totalTemporadas AND s.avaliacao >= :avaliacao")
    List<Serie> seriesPorTemporadaEAValiacao(@Param("totalTemporadas") int totalTemporadas,
                                             @Param("avaliacao") double avaliacao);

    // üîπ Top epis√≥dios de uma s√©rie, ordenados por avalia√ß√£o
    @Query("SELECT e FROM Serie s JOIN s.episodioList e WHERE s = :serie ORDER BY e.avaliacao DESC")
    List<Episodio> topEpisodiosPorSerie(@Param("serie") Serie serie);

    // üîπ Epis√≥dios lan√ßados ap√≥s determinado ano
    @Query("SELECT e FROM Serie s JOIN s.episodioList e " +
            "WHERE s = :serie AND EXTRACT(YEAR FROM e.dataLancamento) >= :anoLancamento")
    List<Episodio> episodiosPorSerieEAno(@Param("serie") Serie serie,
                                         @Param("anoLancamento") int anoLancamento);
    List<Serie> findByTotalTemporadasLessThanEqualAndAvaliacaoGreaterThanEqual(int totalTemporadas, double avaliacao);

    //M√©todo para conex√£o com front
    @Query(value = """
    SELECT s.* FROM tb_series s
    JOIN tb_episodio e ON e.serie_id = s.id
    GROUP BY s.id
    ORDER BY MAX(e.data_lancamento) DESC
    LIMIT 5
    """, nativeQuery = true)
    List<Serie> lancamentoRecentes();

    @Query("SELECT e FROM Serie s JOIN s.episodioList e WHERE s.id = :id AND e.temporada = :numero")
    List<Episodio> obterEpisodiosPorTemporada(Long id, Long numero);



    @Query("SELECT e FROM Serie s JOIN s.episodioList e WHERE s.id = :serieId ORDER BY e.avaliacao DESC")
    List<Episodio> top5EpisodiosPorSerie(@Param("serieId") Long serieId);

    //JPQL->ava Persistence Query Language, ou seja, Linguagem de Consulta de Persist√™ncia Java. Portanto, √© uma linguagem de consulta pr√≥pria do JPA, do controle de persist√™ncia do Java.
    //trabalha com objetos Java, n√£o com tabelas diretamente.

    //Em vez de dizer ‚ÄúSELECT * FROM serie‚Äù, voc√™ diz ‚ÄúSELECT s FROM Serie s‚Äù ‚Äî ou seja, seleciona objetos Serie.
    //Query √© uma pergunta que vc faz ao banco, um comando para ser executado no banco

    //Se o m√©todo n√£o tiver j√° um nome de uma query ele precisa declarar a query com a a√ß√£o se n√£o o JPQL tenta fazer e como n √© ujm m√©todo dentro dos seus padr√µes d√° erro

}